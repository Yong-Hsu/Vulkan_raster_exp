#version 450

#extension GL_EXT_debug_printf : enable
#extension GL_EXT_control_flow_attributes : enable

const uint imageWidth = 512;
const uint imageHeight = 512;

const float nearClippingPLane = 0.1f;
const float farClippingPLane = 10;
float focalLength = 20; // in mm // 35mm Full Aperture in inches
float filmApertureWidth = 0.980;
float filmApertureHeight = 0.735;

const float inchToMm = 25.4;
const float M_PI = 3.141592652795;

layout(local_size_x = 3, local_size_y = 4) in;
layout(binding = 0, rgba8) uniform writeonly image2D resultImage;

struct Camera
{
  vec3 pos;
  vec3 lookat;
  float fov;
};

const mat4 worldToCamera =
// mat4(0.707107, -0.331295, 0.624695, 0, 0, 0.883452, 0.468521, 0, -0.707107, -0.331295, 0.624695, 0, 0, 0, -4, 1);
// mat4(1.0, -0.331295, 0.624695, 0, 0, 0.883452, 0.468521, 0, -0.707107, -0.331295, 0.624695, 0, 0, 0, 0, 1);
mat4(0.7071067690849304, 0, -0.7071067690849304, 0, -0.40824830532073975, 0.8164966106414795, -0.40824830532073975, 0, 0.5773502588272095, 0.5773502588272095, 0.5773502588272095, -1.7320507764816284, 0, 0, -2, 1);

//mat4(1.0f);

layout(binding = 1) uniform UBO
{
  vec3 lightPos;
  float aspectRatio;
  vec4 fogColor;
  Camera camera;
  mat4 rotMat;
} ubo;


struct Vertex {
  vec3 pos;
  vec3 normal;
  vec2 uv;
  vec4 color;
  vec4 joint0;
  vec4 weight0;
  vec4 tangent;
};

// Define a buffer that will hold an array of Vertex structures
layout(std140, binding = 2) buffer VertexBuffer {
  Vertex vertices[];
};

layout(binding = 3) buffer IndexBuffer {
  uint indices[];
};

float randd(vec2 co)
{
  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

float edgeFunction(const vec3 a, const vec3 b, const vec3 c) {
  return (c[0] - a[0]) * (b[1] - a[1]) - (c[1] - a[1]) * (b[0] - a[0]);
}

vec3 multVecMatrix(vec3 vect, mat4 matr)
{
  vec4 res = matr * vec4(vect, 1.0);
  return vec3(res) / res.w;
} 


void computeScreenCoordinates(
  out float top, out float bottom, out float left, out float right
)
{
  float filmAspectRatio = filmApertureWidth / filmApertureHeight;
  float deviceAspectRatio = imageWidth / imageHeight;
    
  top = ((filmApertureHeight * inchToMm / 2) / focalLength) * nearClippingPLane;
  right = ((filmApertureWidth * inchToMm / 2) / focalLength) * nearClippingPLane;

  // field of view (horizontal)
  float fov = 2 * 180 / M_PI * atan((filmApertureWidth * inchToMm / 2) / focalLength);
  // std::cerr << "Field of view " << fov << std::endl;
    
  float xscale = 1;
  float yscale = 1;
    
  switch (1) {
    default:
    case 0:
      if (filmAspectRatio > deviceAspectRatio) {
          xscale = deviceAspectRatio / filmAspectRatio;
      }
      else {
          yscale = filmAspectRatio / deviceAspectRatio;
      }
      break;
    case 1:
      if (filmAspectRatio > deviceAspectRatio) {
          yscale = filmAspectRatio / deviceAspectRatio;
      }
      else {
          xscale = deviceAspectRatio / filmAspectRatio;
      }
      break;
  }
    
  right *= xscale;
  top *= yscale;
    
  bottom = -top;
  left = -right;
}


void convertToRaster(
  vec3 vertexWorld,
  float l, float r,
  float t, float b,
  float near,
  out vec3 vertexRaster)
{
  vec3 vertexCamera = multVecMatrix(vertexWorld, worldToCamera);
    
  // convert to screen space
  vec2 vertexScreen;
  vertexScreen.x = near * vertexCamera.x / -vertexCamera.z;
  vertexScreen.y = near * vertexCamera.y / -vertexCamera.z;
    
  // now convert point from screen space to NDC space (in range [-1,1])
  vec2 vertexNDC;
  vertexNDC.x = 2 * vertexScreen.x / (r - l) - (r + l) / (r - l);
  vertexNDC.y = 2 * vertexScreen.y / (t - b) - (t + b) / (t - b);

  // convert to raster space
  vertexRaster.x = (vertexNDC.x + 1) / 2 * imageWidth;
  // in raster space y is down so invert direction
  vertexRaster.y = (1 - vertexNDC.y) / 2 * imageHeight;
  vertexRaster.z = -vertexCamera.z;
}

void main() {
  // gl_GlobalInvocationID.xy
  uint group_id = gl_WorkGroupID.x;
  uint local_id = gl_LocalInvocationIndex;

  uint NUM_VERTICES = 12;
  mat4 cameraToWorld = inverse(worldToCamera);
  
  float t, b, l, r;
  computeScreenCoordinates(t, b, l, r);

  for (uint i = 0; i < NUM_VERTICES; i += 1)
  {
    vec3 v0 = vertices[indices[i * 3]].pos;
    vec3 v1 = vertices[indices[i * 3 + 1]].pos;
    vec3 v2 = vertices[indices[i * 3 + 2]].pos;

    // Convert the vertices of the triangle to raster space
    vec3 v0Raster, v1Raster, v2Raster;
    convertToRaster(v0, l, r, t, b, nearClippingPLane, v0Raster);
    convertToRaster(v1, l, r, t, b, nearClippingPLane, v1Raster);
    convertToRaster(v2, l, r, t, b, nearClippingPLane, v2Raster);
    debugPrintfEXT("v1Raster: %v3f, %v3f", v1Raster, v2Raster);
    // Precompute reciprocal of vertex z-coordinate
    v0Raster.z = 1 / v0Raster.z;
    v1Raster.z = 1 / v1Raster.z;
    v2Raster.z = 1 / v2Raster.z;

    float xmin = min(min(v0Raster.x, v1Raster.x), v2Raster.x);
    float ymin = min(min(v0Raster.y, v1Raster.y), v2Raster.y);
    float xmax = max(max(v0Raster.x, v1Raster.x), v2Raster.x);
    float ymax = max(max(v0Raster.y, v1Raster.y), v2Raster.y);

    // the triangle is out of screen
    if (xmin > imageWidth - 1 || xmax < 0 || ymin > imageHeight - 1 || ymax < 0) continue;

    // be careful xmin/xmax/ymin/ymax can be negative. Don't cast to uint32_t
    uint x0 = max(0, uint(floor(xmin)));
    uint x1 = min(imageWidth - 1, uint(floor(xmax)));
    uint y0 = max(0, uint(floor(ymin)));
    uint y1 = min(imageHeight - 1, uint(floor(ymax)));

    float area = edgeFunction(v0Raster, v1Raster, v2Raster);

    // Inner loop
    for (uint y = y0; y <= y1; ++y) {
      for (uint x = x0; x <= x1; ++x) {
        vec3 pixelSample = vec3(x + 0.5, y + 0.5, 0);
        float w0 = edgeFunction(v1Raster, v2Raster, pixelSample);
        float w1 = edgeFunction(v2Raster, v0Raster, pixelSample);
        float w2 = edgeFunction(v0Raster, v1Raster, pixelSample);
        // debugPrintfEXT("v1Raster: %v3f, %v3f", v1Raster, v2Raster);
        if (w0 >= 0 && w1 >= 0 && w2 >= 0) {
          w0 /= area;
          w1 /= area;
          w2 /= area;
          float oneOverZ = v0Raster.z * w0 + v1Raster.z * w1 + v2Raster.z * w2;
          float z = 1 / oneOverZ;

          // todo: Depth-buffer test
          // if (z < depthBuffer[y * imageWidth + x]) {
            // depthBuffer[y * imageWidth + x] = z;
          if (true)
          { 
            vec3 v0Cam = multVecMatrix(v0, worldToCamera);
            vec3 v1Cam = multVecMatrix(v1, worldToCamera);
            vec3 v2Cam = multVecMatrix(v2, worldToCamera);

            float px = (v0Cam.x / -v0Cam.z) * w0 + (v1Cam.x / -v1Cam.z) * w1 + (v2Cam.x / -v2Cam.z) * w2;
            float py = (v0Cam.y / -v0Cam.z) * w0 + (v1Cam.y / -v1Cam.z) * w1 + (v2Cam.y / -v2Cam.z) * w2;

            vec3 pt = vec3(px * z, py * z, -z); // pt is in camera space

            // Compute the face normal which is used for a simple facing ratio.
            vec3 n = normalize(cross(v1Cam - v0Cam, v2Cam - v0Cam));
            vec3 viewDirection = normalize(-pt);

            float nDotView = max(0.f, dot(n, viewDirection));

            // The final color is the reuslt of the faction ration multiplied by the
            // checkerboard pattern.
            //const int M = 10;
            //float checker = (fmod(st.x * M, 1.0) > 0.5) ^ (fmod(st.y * M, 1.0) < 0.5);
            // float c = 0.3 * (1 - checker) + 0.7 * checker;
            float c = 1.0f;
            nDotView *= c;
            
            debugPrintfEXT("ndotview value: %f", nDotView);
            
            imageStore(resultImage, ivec2(y, x), vec4(vec3(nDotView * 255), 1.0));
          }
        }
      }
    }
  }

  //for (int x = 0; x <= 24; x++){debugPrintfEXT("invocp %v2u, id %u of %i", gl_GlobalInvocationID.xy, index[x], x);}
  // imageStore(resultImage, ivec2(j, i), vec4(color, 1.0));
}


